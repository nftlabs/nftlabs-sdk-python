{
    "NFTCollection": {
        "name": "type",
        "summary": "Create a collection of one-of-one NFTs.",
        "example": "\n    from thirdweb import ThirdwebSDK\n    from eth_account import Account\n    from web3 import Web3\n\n    // You can switch out this provider and RPC URL for your own\n    provider = Web3(Web3.HTTPProvider(\"<RPC_URL>\"))\n    // This will create a random account to use for signing transactions\n    signer = Account.create()\n\n    sdk = ThirdwebSDK(provider, signer)\n    contract = sdk.get_nft_collection(\"<CONTRACT_ADDRESS>\")\n    ",
        "methods": [],
        "properties": [],
        "reference": ""
    },
    "Edition": {
        "name": "type",
        "summary": "Create a collection of NFTs that lets you mint multiple copies of each NFT.",
        "example": "\n    from thirdweb import ThirdwebSDK\n    from eth_account import Account\n    from web3 import Web3\n\n    // You can switch out this provider and RPC URL for your own\n    provider = Web3(Web3.HTTPProvider(\"<RPC_URL>\"))\n    // This will create a random account to use for signing transactions\n    signer = Account.create()\n\n    sdk = ThirdwebSDK(provider, signer)\n    contract = sdk.get_edition(\"<CONTRACT_ADDRESS>\")\n    ",
        "methods": [],
        "properties": [],
        "reference": ""
    },
    "Token": {
        "name": "type",
        "summary": "Create a standard crypto token or cryptocurrency.",
        "example": "\n    from thirdweb import ThirdwebSDK\n    from eth_account import Account\n    from web3 import Web3\n\n    // You can switch out this provider and RPC URL for your own\n    provider = Web3(Web3.HTTPProvider(\"<RPC_URL>\"))\n    // This will create a random account to use for signing transactions\n    signer = Account.create()\n\n    sdk = ThirdwebSDK(provider, signer)\n    contract = sdk.get_token(\"<CONTRACT_ADDRESS>\")\n    ",
        "methods": [],
        "properties": [],
        "reference": ""
    },
    "Marketplace": {
        "name": "type",
        "summary": "Create your own whitelabel marketplace that enables users to buy and sell any digital assets.",
        "example": "\n    from thirdweb import ThirdwebSDK\n    from eth_account import Account\n    from web3 import Web3\n\n    // You can switch out this provider and RPC URL for your own\n    provider = Web3(Web3.HTTPProvider(\"<RPC_URL>\"))\n    // This will create a random account to use for signing transactions\n    signer = Account.create()\n\n    sdk = ThirdwebSDK(provider, signer)\n    contract = sdk.get_marketplace(\"<CONTRACT_ADDRESS>\")\n    ",
        "methods": [],
        "properties": [],
        "reference": ""
    },
    "NFTDrop": {
        "name": "type",
        "summary": "Setup a collection of one-of-one NFTs that are minted as users claim them.",
        "example": "\n    from thirdweb import ThirdwebSDK\n    from eth_account import Account\n    from web3 import Web3\n\n    // You can switch out this provider and RPC URL for your own\n    provider = Web3(Web3.HTTPProvider(\"<RPC_URL>\"))\n    // This will create a random account to use for signing transactions\n    signer = Account.create()\n\n    sdk = ThirdwebSDK(provider, signer)\n    contract = sdk.get_nft_drop(\"<CONTRACT_ADDRESS>\")\n    ",
        "methods": [],
        "properties": [],
        "reference": ""
    },
    "EditionDrop": {
        "name": "type",
        "summary": "Setup a collection of NFTs with a customizable number of each NFT that are minted as users claim them.",
        "example": "\n    from thirdweb import ThirdwebSDK\n    from eth_account import Account\n    from web3 import Web3\n\n    // You can switch out this provider and RPC URL for your own\n    provider = Web3(Web3.HTTPProvider(\"<RPC_URL>\"))\n    // This will create a random account to use for signing transactions\n    signer = Account.create()\n\n    sdk = ThirdwebSDK(provider, signer)\n    contract = sdk.get_edition_drop(\"<CONTRACT_ADDRESS>\")\n    ",
        "methods": [],
        "properties": [],
        "reference": ""
    }
}