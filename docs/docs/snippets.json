{
    "NFTCollection": {
        "name": "NFTCollection",
        "summary": "Create a collection of one-of-one NFTs.",
        "example": "from thirdweb import ThirdwebSDK\nfrom eth_account import Account\n\n# You can customize this to a supported network or your own RPC URL\nnetwork = \"mumbai\"\n\n# This will create a random account to use for signing transactions\nsigner = Account.create()\n\nsdk = ThirdwebSDK(network, signer)\ncontract = sdk.get_nft_collection(\"{{contract_address}}\")",
        "methods": [
            {
                "name": "balance_of",
                "summary": "Get the token balance of a specific address",
                "example": "balance = contract.balance_of(\"{{wallet_address}}\")\nprint(balance)",
                "reference": "https://docs.thirdweb.com/python/erc721#balance_of"
            },
            {
                "name": "get",
                "summary": "Get metadata for a token",
                "example": "nft = contract.get(0)\nprint(nft)",
                "reference": "https://docs.thirdweb.com/python/erc721#get"
            },
            {
                "name": "get_all",
                "summary": "Get the metadata of all tokens in the contract",
                "example": "nfts = contract.get_all()\nprint(nfts)",
                "reference": "https://docs.thirdweb.com/python/erc721#get_all"
            },
            {
                "name": "get_owned",
                "summary": "Get the metadata of all tokens owned by a specific address",
                "example": "nfts = contract.get_owned(\"{{wallet_address}}\")\nprint(nfts)",
                "reference": "https://docs.thirdweb.com/python/erc721#get_owned"
            },
            {
                "name": "mint_batch_to",
                "summary": "Mint a batch of new NFTs to the specified wallet",
                "example": "from thirdweb.types.nft import NFTMetadataInput\n\n# You can customize this metadata however you like\nmetadatas = [\n    NFTMetadataInput.from_json({\n        \"name\": \"Cool NFT\",\n        \"description\": \"This is a cool NFT\",\n        \"image\": open(\"path/to/file.jpg\", \"rb\"),\n    }),\n    NFTMetadataInput.from_json({\n        \"name\": \"Cooler NFT\",\n        \"description\": \"This is a cooler NFT\",\n        \"image\": open(\"path/to/file.jpg\", \"rb\"),\n    }),\n]\n\n# You can pass in any address here to mint the NFT to\ntxs = contract.mint_batch_to(\"{{wallet_address}}\", metadatas)\nreceipt = txs[0].receipt\nfirst_token_id = txs[0].id\nfirst_nft = txs[0].data()",
                "reference": "https://docs.thirdweb.com/python/nft-collection#mint_batch_to"
            },
            {
                "name": "mint_to",
                "summary": "Mint a new NFT to the specified wallet",
                "example": "from thirdweb.types.nft import NFTMetadataInput\n\n# Note that you can customize this metadata however you like\nmetadata = NFTMetadataInput.from_json({\n    \"name\": \"Cool NFT\",\n    \"description\": \"This is a cool NFT\",\n    \"image\": open(\"path/to/file.jpg\", \"rb\"),\n})\n\n# You can pass in any address here to mint the NFT to\ntx = contract.mint_to(\"{{wallet_address}}\", metadata)\nreceipt = tx.receipt\ntoken_id = tx.id\nnft = tx.data()",
                "reference": "https://docs.thirdweb.com/python/nft-collection#mint_to"
            },
            {
                "name": "transfer",
                "summary": "Transfer a specified token from the connected wallet to a specified address.",
                "example": "to = \"{{wallet_address}}\"\ntoken_id = 0\n\nreceipt = contract.transfer(to, token_id)",
                "reference": "https://docs.thirdweb.com/python/erc721#transfer"
            }
        ],
        "properties": [],
        "reference": "https://docs.thirdweb.com/python/nft-collection"
    },
    "Edition": {
        "name": "Edition",
        "summary": "Create a collection of NFTs that lets you mint multiple copies of each NFT.",
        "example": "from thirdweb import ThirdwebSDK\nfrom eth_account import Account\n\n# You can customize this to a supported network or your own RPC URL\nnetwork = \"mumbai\"\n\n# This will create a random account to use for signing transactions\nsigner = Account.create()\n\nsdk = ThirdwebSDK(network, signer)\ncontract = sdk.get_edition(\"{{contract_address}}\")",
        "methods": [
            {
                "name": "balance_of",
                "summary": "Get a specific wallets balance of a specific token",
                "example": "address = \"{{wallet_address}}\"\ntoken_id = 0\n\nbalance = contract.balance_of(address, token_id)",
                "reference": "https://docs.thirdweb.com/python/erc1155#balance_of"
            },
            {
                "name": "get",
                "summary": "Get metadata for a token",
                "example": "nft = contract.get(0)\nprint(nft)",
                "reference": "https://docs.thirdweb.com/python/erc1155#get"
            },
            {
                "name": "get_all",
                "summary": "Get the metadata for all tokens on the contract",
                "example": "metadatas = contract.get_all()\nprint(metadatas)",
                "reference": "https://docs.thirdweb.com/python/erc1155#get_all"
            },
            {
                "name": "get_owned",
                "summary": "Get the metadata for all the tokens owned by an address",
                "example": "address = \"{{wallet_address}}\"\nowned = contract.get_owned(address)\nprint(owned)",
                "reference": "https://docs.thirdweb.com/python/erc1155#get_owned"
            },
            {
                "name": "mint_batch_to",
                "summary": "Mint a batch of NFTs to the specified wallet",
                "example": "from thirdweb.types.nft import NFTMetadataInput, EditionMetadataInput\n\n# Note that you can customize this metadata however you like\nmetadatas_with_supply = [\n    EditionMetadataInput(\n        NFTMetadataInput.from_json({\n            \"name\": \"Cool NFT\",\n            \"description\": \"This is a cool NFT\",\n            \"image\": open(\"path/to/file.jpg\", \"rb\"),\n        }),\n        100\n    ),\n    EditionMetadataInput(\n        NFTMetadataInput.from_json({\n            \"name\": \"Cooler NFT\",\n            \"description\": \"This is a cooler NFT\",\n            \"image\": open(\"path/to/file.jpg\", \"rb\"),\n        }),\n        100\n    )\n]\n\n# You can pass in any address here to mint the NFT to\ntxs = contract.mint_batch_to(\"{{wallet_address}}\", metadatas_with_supply)\nreceipt = txs[0].receipt\ntoken_id = txs[0].id\nnft = txs[0].data()",
                "reference": "https://docs.thirdweb.com/python/edition#mint_batch_to"
            },
            {
                "name": "mint_to",
                "summary": "Mint a new NFT to the specified wallet",
                "example": "from thirdweb.types.nft import NFTMetadataInput, EditionMetadataInput\n\n# Note that you can customize this metadata however you like\nmetadata_with_supply = EditionMetadataInput(\n    NFTMetadataInput.from_json({\n        \"name\": \"Cool NFT\",\n        \"description\": \"This is a cool NFT\",\n        \"image\": open(\"path/to/file.jpg\", \"rb\"),\n    }),\n    100\n)\n\n# You can pass in any address here to mint the NFT to\ntx = contract.mint_to(\"{{wallet_address}}\", metadata_with_supply)\nreceipt = tx.receipt\ntoken_id = tx.id\nnft = tx.data()",
                "reference": "https://docs.thirdweb.com/python/edition#mint_to"
            },
            {
                "name": "transfer",
                "summary": "Transfer a specified token from the connected wallet to a specified address.",
                "example": "to = \"{{wallet_address}}\"\ntoken_id = 0\namount = 1\n\nreceipt = contract.transfer(to, token_id, amount)",
                "reference": "https://docs.thirdweb.com/python/erc1155#transfer"
            }
        ],
        "properties": [],
        "reference": "https://docs.thirdweb.com/python/edition"
    },
    "Token": {
        "name": "Token",
        "summary": "Create a standard crypto token or cryptocurrency.",
        "example": "from thirdweb import ThirdwebSDK\nfrom eth_account import Account\n\n# You can customize this to a supported network or your own RPC URL\nnetwork = \"mumbai\"\n\n# This will create a random account to use for signing transactions\nsigner = Account.create()\n\nsdk = ThirdwebSDK(network, signer)\ncontract = sdk.get_token(\"{{contract_address}}\")",
        "methods": [
            {
                "name": "allowance",
                "summary": "Get a specific spenders allowance of this token for the connected wallet.",
                "example": "spender = \"{{wallet_address}}\"\nallowance = contract.allowance(spender)",
                "reference": "https://docs.thirdweb.com/python/erc20#allowance"
            },
            {
                "name": "allowance_of",
                "summary": "Get the allowance of the specified spender for a specified owner.",
                "example": "# Address of the wallet who owns the funds\naddress = \"{{wallet_address}}\"\n\n# Address of the wallet to check the token allowance\nspender = \"0x...\"\n\nallowance = contract.allowance_of(address, spender)\nprint(allowance)",
                "reference": "https://docs.thirdweb.com/python/erc20#allowance_of"
            },
            {
                "name": "balance",
                "summary": "Get the token balance of the connected wallet.",
                "example": "balance = contract.balance()\nprint(balance)",
                "reference": "https://docs.thirdweb.com/python/erc20#balance"
            },
            {
                "name": "balance_of",
                "summary": "Get the balance of the specified wallet",
                "example": "address = \"{{wallet_address}}\"\nbalance = contract.balance_of(address)\nprint(balance)",
                "reference": "https://docs.thirdweb.com/python/erc20#balance_of"
            },
            {
                "name": "burn",
                "summary": "Burn a specified amount of tokens from the connected wallet.",
                "example": "amount = 0.1\ncontract.burn(amount)",
                "reference": "https://docs.thirdweb.com/python/erc20#burn"
            },
            {
                "name": "burn_from",
                "summary": "Burn a specified amount of tokens from a specified wallet.",
                "example": "holder = \"{{wallet_address}}\"\namount = 0.1\ncontract.burn_from(holder, amount)",
                "reference": "https://docs.thirdweb.com/python/erc20#burn_from"
            },
            {
                "name": "get",
                "summary": "Get the token metadata including name, symbol, decimals, etc.",
                "example": "token = contract.get()\nprint(token)",
                "reference": "https://docs.thirdweb.com/python/erc20#get"
            },
            {
                "name": "mint_batch_to",
                "summary": "Mint tokens to a list of wallets.",
                "example": "from thirdweb.types.currency import TokenAmount\n\nargs = [\n    TokenAmount(\"{{wallet_address}}\", 1),\n    TokenAmount(\"{{wallet_address}}\", 2),\n]\n\ncontract.mint_batch_to(args)",
                "reference": "https://docs.thirdweb.com/python/token#mint_batch_to"
            },
            {
                "name": "mint_to",
                "summary": "Mint tokens to a specified wallet.",
                "example": "contract.mint_to(\"{{wallet_address}}\", 1)",
                "reference": "https://docs.thirdweb.com/python/token#mint_to"
            },
            {
                "name": "set_allowance",
                "summary": "Sets the allowance of the specified wallet over the connected wallets funds to        a specified amount.",
                "example": "spender = \"0x...\"\namount = 100\ncontract.set_allowance(spender, amount)",
                "reference": "https://docs.thirdweb.com/python/erc20#set_allowance"
            },
            {
                "name": "transfer",
                "summary": "Transfer a specified amount of tokens from the connected wallet to a specified address.",
                "example": "# Address to send tokens to\nto = \"0x...\n\n# Amount of tokens to transfer\namount = 0.1\n\ncontract.transfer(to, amount)",
                "reference": "https://docs.thirdweb.com/python/erc20#transfer"
            },
            {
                "name": "transfer_batch",
                "summary": "Transfer tokens from the connected wallet to many wallets.",
                "example": "from thirdweb.types.currency import TokenAmount\n\ndata = [\n    TokenAmount(\"{{wallet_address}}\", 0.1),\n    TokenAmount(\"0x...\", 0.2),\n]\n\ncontract.transfer_batch(data)",
                "reference": "https://docs.thirdweb.com/python/erc20#transfer_batch"
            },
            {
                "name": "transfer_from",
                "summary": "Transfer a specified amount of tokens from one specified address to another.",
                "example": "# Address to send tokens from\nfr = \"{{wallet_address}}\"\n\n# Address to send tokens to\nto = \"0x...\"\n\n# Amount of tokens to transfer\namount = 0.1\n\ncontract.transfer_from(fr, to, amount)",
                "reference": "https://docs.thirdweb.com/python/erc20#transfer_from"
            }
        ],
        "properties": [],
        "reference": "https://docs.thirdweb.com/python/token"
    },
    "Marketplace": {
        "name": "Marketplace",
        "summary": "Create your own whitelabel marketplace that enables users to buy and sell any digital assets.",
        "example": "from thirdweb import ThirdwebSDK\nfrom eth_account import Account\n\n# You can customize this to a supported network or your own RPC URL\nnetwork = \"mumbai\"\n\n# This will create a random account to use for signing transactions\nsigner = Account.create()\n\nsdk = ThirdwebSDK(network, signer)\ncontract = sdk.get_marketplace(\"{{contract_address}}\")",
        "methods": [
            {
                "name": "buyout_listing",
                "summary": "Buyout a listing by listing ID",
                "example": "listing_id = 0\nquantity_desired = 1\n\ncontract.buyout_listing(listing_id, quantity_desired)",
                "reference": "https://docs.thirdweb.com/python/marketplace#buyout_listing"
            },
            {
                "name": "get_active_listings",
                "summary": "Get all the currently active listings from the marketplace.",
                "example": "listings = contract.get_active_listings()\nprice_of_first = listings[0].price",
                "reference": "https://docs.thirdweb.com/python/marketplace#get_active_listings"
            },
            {
                "name": "get_all",
                "summary": "Get all the listings that have ever been made on this marketplace.",
                "example": "listings = contract.get_all_listings()\nprice_of_first = listings[0].price",
                "reference": "https://docs.thirdweb.com/python/marketplace#get_all"
            },
            {
                "name": "get_all_listings",
                "summary": "Get all the listings that have ever been made on this marketplace.",
                "example": "listings = contract.get_all_listings()\nprice_of_first = listings[0].price",
                "reference": "https://docs.thirdweb.com/python/marketplace#get_all_listings"
            },
            {
                "name": "set_bid_buffer_bps",
                "summary": "Set the bid buffer basis points for this marketplace.",
                "example": "buffer_bps = 500\ncontract.set_bid_buffer_bps(buffer_bps)",
                "reference": "https://docs.thirdweb.com/python/marketplace#set_bid_buffer_bps"
            },
            {
                "name": "set_time_buffer_in_seconds",
                "summary": "Set the time buffer of the marketplace.",
                "example": "buffer_in_seconds = 60\ncontract.set_time_buffer_in_seconds(buffer_in_seconds)",
                "reference": "https://docs.thirdweb.com/python/marketplace#set_time_buffer_in_seconds"
            }
        ],
        "properties": [],
        "reference": "https://docs.thirdweb.com/python/marketplace"
    },
    "NFTDrop": {
        "name": "NFTDrop",
        "summary": "Setup a collection of one-of-one NFTs that are minted as users claim them.",
        "example": "from thirdweb import ThirdwebSDK\nfrom eth_account import Account\n\n# You can customize this to a supported network or your own RPC URL\nnetwork = \"mumbai\"\n\n# This will create a random account to use for signing transactions\nsigner = Account.create()\n\nsdk = ThirdwebSDK(network, signer)\ncontract = sdk.get_nft_drop(\"{{contract_address}}\")",
        "methods": [
            {
                "name": "balance_of",
                "summary": "Get the token balance of a specific address",
                "example": "balance = contract.balance_of(\"{{wallet_address}}\")\nprint(balance)",
                "reference": "https://docs.thirdweb.com/python/erc721#balance_of"
            },
            {
                "name": "claim_to",
                "summary": "Claim NFTs to a destination address.",
                "example": "address = {{wallet_address}}\nquantity = 1\n\ntx = contract.claim_to(address, quantity)\nreceipt = tx.receipt\nclaimed_token_id = tx.id\nclaimed_nft = tx.data()",
                "reference": "https://docs.thirdweb.com/python/nft-drop#claim_to"
            },
            {
                "name": "create_batch",
                "summary": "Create a batch of NFTs.",
                "example": "from thirdweb.types.nft import NFTMetadataInput\n\n# You can customize this metadata however you like\nmetadatas = [\n    NFTMetadataInput.from_json({\n        \"name\": \"Cool NFT\",\n        \"description\": \"This is a cool NFT\",\n        \"image\": open(\"path/to/file.jpg\", \"rb\"),\n    }),\n    NFTMetadataInput.from_json({\n        \"name\": \"Cooler NFT\",\n        \"description\": \"This is a cooler NFT\",\n        \"image\": open(\"path/to/file.jpg\", \"rb\"),\n    }),\n]\n\ntxs = contract.create_batch(metadatas)\nfirst_token_id = txs[0].id\nfirst_nft = txs[0].data()",
                "reference": "https://docs.thirdweb.com/python/nft-drop#create_batch"
            },
            {
                "name": "get",
                "summary": "Get metadata for a token",
                "example": "nft = contract.get(0)\nprint(nft)",
                "reference": "https://docs.thirdweb.com/python/erc721#get"
            },
            {
                "name": "get_all",
                "summary": "Get the metadata of all tokens in the contract",
                "example": "nfts = contract.get_all()\nprint(nfts)",
                "reference": "https://docs.thirdweb.com/python/erc721#get_all"
            },
            {
                "name": "get_all_claimed",
                "summary": "Get all claimed NFTs.",
                "example": "claimed_nfts = contract.get_all_claimed()\nfirst_owner = claimed_nfts[0].owner",
                "reference": "https://docs.thirdweb.com/python/nft-drop#get_all_claimed"
            },
            {
                "name": "get_all_unclaimed",
                "summary": "Get all unclaimed NFTs.",
                "example": "unclaimed_nfts = contract.get_all_unclaimed()\nfirst_nft_name = unclaimed_nfts[0].name",
                "reference": "https://docs.thirdweb.com/python/nft-drop#get_all_unclaimed"
            },
            {
                "name": "get_owned",
                "summary": "Get the metadata of all tokens owned by a specific address",
                "example": "nfts = contract.get_owned(\"{{wallet_address}}\")\nprint(nfts)",
                "reference": "https://docs.thirdweb.com/python/erc721#get_owned"
            },
            {
                "name": "total_claimed_supply",
                "summary": "Get the total number of NFTs claimed from this contract",
                "example": "total_claimed = contract.total_claimed_supply()",
                "reference": "https://docs.thirdweb.com/python/nft-drop#total_claimed_supply"
            },
            {
                "name": "total_unclaimed_supply",
                "summary": "Get the total number of unclaimed NFTs in this contract",
                "example": "total_unclaimed = contract.total_unclaimed_supply()",
                "reference": "https://docs.thirdweb.com/python/nft-drop#total_unclaimed_supply"
            },
            {
                "name": "transfer",
                "summary": "Transfer a specified token from the connected wallet to a specified address.",
                "example": "to = \"{{wallet_address}}\"\ntoken_id = 0\n\nreceipt = contract.transfer(to, token_id)",
                "reference": "https://docs.thirdweb.com/python/erc721#transfer"
            }
        ],
        "properties": [],
        "reference": "https://docs.thirdweb.com/python/nft-drop"
    },
    "EditionDrop": {
        "name": "EditionDrop",
        "summary": "Setup a collection of NFTs with a customizable number of each NFT that are minted as users claim them.",
        "example": "from thirdweb import ThirdwebSDK\nfrom eth_account import Account\n\n# You can customize this to a supported network or your own RPC URL\nnetwork = \"mumbai\"\n\n# This will create a random account to use for signing transactions\nsigner = Account.create()\n\nsdk = ThirdwebSDK(network, signer)\ncontract = sdk.get_edition_drop(\"{{contract_address}}\")",
        "methods": [
            {
                "name": "balance_of",
                "summary": "Get a specific wallets balance of a specific token",
                "example": "address = \"{{wallet_address}}\"\ntoken_id = 0\n\nbalance = contract.balance_of(address, token_id)",
                "reference": "https://docs.thirdweb.com/python/erc1155#balance_of"
            },
            {
                "name": "claim_to",
                "summary": "Claim NFTs to a destination address.",
                "example": "address = {{wallet_address}}\ntoken_id = 0\nquantity = 1\n\ntx = contract.claim_to(address, token_id, quantity)\nreceipt = tx.receipt\nclaimed_token_id = tx.id\nclaimed_nft = tx.data()",
                "reference": "https://docs.thirdweb.com/python/edition-drop#claim_to"
            },
            {
                "name": "create_batch",
                "summary": "Create a batch of NFTs.",
                "example": "from thirdweb.types.nft import NFTMetadataInput, EditionMetadataInput\n\n# Note that you can customize this metadata however you like\nmetadatas_with_supply = [\n    EditionMetadataInput(\n        NFTMetadataInput.from_json({\n            \"name\": \"Cool NFT\",\n            \"description\": \"This is a cool NFT\",\n            \"image\": open(\"path/to/file.jpg\", \"rb\"),\n        }),\n        100\n    ),\n    EditionMetadataInput(\n        NFTMetadataInput.from_json({\n            \"name\": \"Cooler NFT\",\n            \"description\": \"This is a cooler NFT\",\n            \"image\": open(\"path/to/file.jpg\", \"rb\"),\n        }),\n        100\n    )\n]\n\ntxs = contract.create_batch(metadata_with_supply)\nfirst_token_id = txs[0].id\nfirst_nft = txs[0].data()",
                "reference": "https://docs.thirdweb.com/python/edition-drop#create_batch"
            },
            {
                "name": "get",
                "summary": "Get metadata for a token",
                "example": "nft = contract.get(0)\nprint(nft)",
                "reference": "https://docs.thirdweb.com/python/erc1155#get"
            },
            {
                "name": "get_all",
                "summary": "Get the metadata for all tokens on the contract",
                "example": "metadatas = contract.get_all()\nprint(metadatas)",
                "reference": "https://docs.thirdweb.com/python/erc1155#get_all"
            },
            {
                "name": "get_owned",
                "summary": "Get the metadata for all the tokens owned by an address",
                "example": "address = \"{{wallet_address}}\"\nowned = contract.get_owned(address)\nprint(owned)",
                "reference": "https://docs.thirdweb.com/python/erc1155#get_owned"
            },
            {
                "name": "transfer",
                "summary": "Transfer a specified token from the connected wallet to a specified address.",
                "example": "to = \"{{wallet_address}}\"\ntoken_id = 0\namount = 1\n\nreceipt = contract.transfer(to, token_id, amount)",
                "reference": "https://docs.thirdweb.com/python/erc1155#transfer"
            }
        ],
        "properties": [],
        "reference": "https://docs.thirdweb.com/python/edition-drop"
    }
}