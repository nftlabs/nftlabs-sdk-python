{
    "NFTCollection": {
        "name": "type",
        "summary": "Create a collection of one-of-one NFTs.",
        "example": "\n    from thirdweb import ThirdwebSDK\n    from eth_account import Account\n    from web3 import Web3\n\n    // You can switch out this provider and RPC URL for your own\n    provider = Web3(Web3.HTTPProvider(\"<RPC_URL>\"))\n    // This will create a random account to use for signing transactions\n    signer = Account.create()\n\n    sdk = ThirdwebSDK(provider, signer)\n    contract = sdk.get_nft_collection(\"{{contract_address}}\")\n    ",
        "methods": [
            {
                "name": "balance_of",
                "summary": "Get the token balance of a specific address",
                "example": "\n        balance = contract.balance_of(\"{{wallet_address}}\")\n        print(balance)\n        "
            },
            {
                "name": "get",
                "summary": "Get metadata for a token",
                "example": "\n        nft = contract.get(0)\n        print(nft)\n        "
            },
            {
                "name": "get_all",
                "summary": "Get the metadata of all tokens in the contract",
                "example": "\n        nfts = contract.get_all()\n        print(nfts)\n        "
            },
            {
                "name": "get_owned",
                "summary": "Get the metadata of all tokens owned by a specific address",
                "example": "\n        nfts = contract.get_owned(\"{{wallet_address}}\")\n        print(nfts)\n        "
            },
            {
                "name": "mint_batch_to",
                "summary": "Mint a batch of new NFTs to the specified wallet",
                "example": "\n        from thirdweb.types.nft import NFTMetadataInput\n\n        # You can customize this metadata however you like\n        metadatas = [\n            NFTMetadataInput.from_json({\n                \"name\": \"Cool NFT\",\n                \"description\": \"This is a cool NFT\",\n                \"image\": open(\"path/to/file.jpg\", \"rb\"),\n            }),\n            NFTMetadataInput.from_json({\n                \"name\": \"Cooler NFT\",\n                \"description\": \"This is a cooler NFT\",\n                \"image\": open(\"path/to/file.jpg\", \"rb\"),\n            }),\n        ]\n\n        # You can pass in any address here to mint the NFT to\n        txs = contract.mint_batch_to(\"{{wallet_address}}\", metadatas)\n        receipt = txs[0].receipt\n        first_token_id = txs[0].id\n        first_nft = txs[0].data()\n        "
            },
            {
                "name": "mint_to",
                "summary": "Mint a new NFT to the specified wallet",
                "example": "\n        from thirdweb.types.nft import NFTMetadataInput\n\n        # Note that you can customize this metadata however you like\n        metadata = NFTMetadataInput.from_json({\n            \"name\": \"Cool NFT\",\n            \"description\": \"This is a cool NFT\",\n            \"image\": open(\"path/to/file.jpg\", \"rb\"),\n        })\n\n        # You can pass in any address here to mint the NFT to\n        tx = contract.mint_to(\"{{wallet_address}}\", metadata)\n        receipt = tx.receipt\n        token_id = tx.id\n        nft = tx.data()\n        "
            },
            {
                "name": "transfer",
                "summary": "Transfer a specified token from the connected wallet to a specified address.",
                "example": "\n        to = \"{{wallet_address}}\"\n        token_id = 0\n\n        receipt = contract.transfer(to, token_id)\n        "
            }
        ],
        "properties": [],
        "reference": ""
    },
    "Edition": {
        "name": "type",
        "summary": "Create a collection of NFTs that lets you mint multiple copies of each NFT.",
        "example": "\n    from thirdweb import ThirdwebSDK\n    from eth_account import Account\n    from web3 import Web3\n\n    // You can switch out this provider and RPC URL for your own\n    provider = Web3(Web3.HTTPProvider(\"<RPC_URL>\"))\n    // This will create a random account to use for signing transactions\n    signer = Account.create()\n\n    sdk = ThirdwebSDK(provider, signer)\n    contract = sdk.get_edition(\"{{contract_address}}\")\n    ",
        "methods": [
            {
                "name": "balance_of",
                "summary": "Get a specific wallets balance of a specific token",
                "example": "\n        address = \"{{wallet_address}}\"\n        token_id = 0\n\n        balance = contract.balance_of(address, token_id)\n        "
            },
            {
                "name": "get",
                "summary": "Get metadata for a token",
                "example": "\n        nft = contract.get(0)\n        print(nft)\n        "
            },
            {
                "name": "get_all",
                "summary": "Get the metadata for all tokens on the contract",
                "example": "\n        metadatas = contract.get_all()\n        print(metadatas)\n        "
            },
            {
                "name": "get_owned",
                "summary": "Get the metadata for all the tokens owned by an address",
                "example": "\n        address = \"{{wallet_address}}\"\n        owned = contract.get_owned(address)\n        print(owned)\n        "
            },
            {
                "name": "mint_batch_to",
                "summary": "Mint a batch of NFTs to the specified wallet",
                "example": "\n        from thirdweb.types.nft import NFTMetadataInput, EditionMetadataInput\n\n        # Note that you can customize this metadata however you like\n        metadatas_with_supply = [\n            EditionMetadataInput(\n                NFTMetadataInput.from_json({\n                    \"name\": \"Cool NFT\",\n                    \"description\": \"This is a cool NFT\",\n                    \"image\": open(\"path/to/file.jpg\", \"rb\"),\n                }),\n                100\n            ),\n            EditionMetadataInput(\n                NFTMetadataInput.from_json({\n                    \"name\": \"Cooler NFT\",\n                    \"description\": \"This is a cooler NFT\",\n                    \"image\": open(\"path/to/file.jpg\", \"rb\"),\n                }),\n                100\n            )\n        ]\n\n        # You can pass in any address here to mint the NFT to\n        txs = contract.mint_to(\"{{wallet_address}}\", metadata_with_supply)\n        receipt = txs[0].receipt\n        token_id = txs[0].id\n        nft = txs[0].data()\n        "
            },
            {
                "name": "mint_to",
                "summary": "Mint a new NFT to the specified wallet",
                "example": "\n        from thirdweb.types.nft import NFTMetadataInput, EditionMetadataInput\n\n        # Note that you can customize this metadata however you like\n        metadata_with_supply = EditionMetadataInput(\n            NFTMetadataInput.from_json({\n                \"name\": \"Cool NFT\",\n                \"description\": \"This is a cool NFT\",\n                \"image\": open(\"path/to/file.jpg\", \"rb\"),\n            }),\n            100\n        )\n\n        # You can pass in any address here to mint the NFT to\n        tx = contract.mint_to(\"{{wallet_address}}\", metadata_with_supply)\n        receipt = tx.receipt\n        token_id = tx.id\n        nft = tx.data()\n        "
            },
            {
                "name": "transfer",
                "summary": "Transfer a specified token from the connected wallet to a specified address.",
                "example": "\n        to = \"{{wallet_address}}\"\n        token_id = 0\n        amount = 1\n\n        receipt = contract.transfer(to, token_id, amount)\n        "
            }
        ],
        "properties": [],
        "reference": ""
    },
    "Token": {
        "name": "type",
        "summary": "Create a standard crypto token or cryptocurrency.",
        "example": "\n    from thirdweb import ThirdwebSDK\n    from eth_account import Account\n    from web3 import Web3\n\n    // You can switch out this provider and RPC URL for your own\n    provider = Web3(Web3.HTTPProvider(\"<RPC_URL>\"))\n    // This will create a random account to use for signing transactions\n    signer = Account.create()\n\n    sdk = ThirdwebSDK(provider, signer)\n    contract = sdk.get_token(\"{{contract_address}}\")\n    ",
        "methods": [
            {
                "name": "allowance",
                "summary": "Get a specific spenders allowance of this token for the connected wallet.",
                "example": "\n        spender = \"{{wallet_address}}\"\n        allowance = contract.allowance(spender)\n        "
            },
            {
                "name": "allowance_of",
                "summary": "Get the allowance of the specified spender for a specified owner.",
                "example": "\n        # Address of the wallet who owns the funds\n        address = \"{{wallet_address}}\"\n\n        # Address of the wallet to check the token allowance\n        spender = \"0x...\"\n\n        allowance = contract.allowance_of(address, spender)\n        print(allowance)\n        "
            },
            {
                "name": "balance",
                "summary": "Get the token balance of the connected wallet.",
                "example": "\n        balance = contract.balance()\n        print(balance)\n        "
            },
            {
                "name": "balance_of",
                "summary": "Get the balance of the specified wallet",
                "example": "\n        address = \"{{wallet_address}}\"\n        balance = contract.balance_of(address)\n        print(balance)\n        "
            },
            {
                "name": "burn",
                "summary": "Burn a specified amount of tokens from the connected wallet.",
                "example": "\n        amount = 0.1\n        contract.burn(amount)\n        "
            },
            {
                "name": "burn_from",
                "summary": "Burn a specified amount of tokens from a specified wallet.",
                "example": "\n        holder = \"{{wallet_address}}\"\n        amount = 0.1\n        contract.burn_from(holder, amount)\n        "
            },
            {
                "name": "get",
                "summary": "Get the token metadata including name, symbol, decimals, etc.",
                "example": "\n        token = contract.get()\n        print(token)\n        "
            },
            {
                "name": "mint_batch_to",
                "summary": "Mint tokens to a list of wallets.",
                "example": "\n        from thirdweb.types.currency import TokenAmount\n\n        args = [\n            TokenAmount(\"{{wallet_address}}\", 1),\n            TokenAmount(\"{{wallet_address}}\", 2),\n        ]\n\n        contract.mint_batch_to(args)\n        "
            },
            {
                "name": "mint_to",
                "summary": "Mint tokens to a specified wallet.",
                "example": "\n        contract.mint_to(\"{{wallet_address}}\", 1)\n        "
            },
            {
                "name": "set_allowance",
                "summary": "Sets the allowance of the specified wallet over the connected wallets funds to        a specified amount.",
                "example": "\n        spender = \"0x...\"\n        amount = 100\n        contract.set_allowance(spender, amount)\n        "
            },
            {
                "name": "transfer",
                "summary": "Transfer a specified amount of tokens from the connected wallet to a specified address.",
                "example": "\n        # Address to send tokens to\n        to = \"0x...\n\n        # Amount of tokens to transfer\n        amount = 0.1\n\n        contract.transfer(to, amount)\n        "
            },
            {
                "name": "transfer_batch",
                "summary": "Transfer tokens from the connected wallet to many wallets.",
                "example": "\n        from thirdweb.types.currency import TokenAmount\n\n        data = [\n            TokenAmount(\"{{wallet_address}}\", 0.1),\n            TokenAmount(\"0x...\", 0.2),\n        ]\n\n        contract.transfer_batch(data)\n        "
            },
            {
                "name": "transfer_from",
                "summary": "Transfer a specified amount of tokens from one specified address to another.",
                "example": "\n        # Address to send tokens from\n        fr = \"{{wallet_address}}\"\n\n        # Address to send tokens to\n        to = \"0x...\"\n\n        # Amount of tokens to transfer\n        amount = 0.1\n\n        contract.transfer_from(fr, to, amount)\n        "
            }
        ],
        "properties": [],
        "reference": ""
    },
    "Marketplace": {
        "name": "type",
        "summary": "Create your own whitelabel marketplace that enables users to buy and sell any digital assets.",
        "example": "\n    from thirdweb import ThirdwebSDK\n    from eth_account import Account\n    from web3 import Web3\n\n    // You can switch out this provider and RPC URL for your own\n    provider = Web3(Web3.HTTPProvider(\"<RPC_URL>\"))\n    // This will create a random account to use for signing transactions\n    signer = Account.create()\n\n    sdk = ThirdwebSDK(provider, signer)\n    contract = sdk.get_marketplace(\"{{contract_address}}\")\n    ",
        "methods": [
            {
                "name": "buyout_listing",
                "summary": "Buyout a listing by listing ID",
                "example": "\n        listing_id = 0\n        quantity_desired = 1\n\n        contract.buyout_listing(listing_id, quantity_desired)\n        "
            },
            {
                "name": "get_active_listings",
                "summary": "Get all the currently active listings from the marketplace.",
                "example": "\n        listings = contract.get_active_listings()\n        price_of_first = listings[0].price\n        "
            },
            {
                "name": "get_all",
                "summary": "Get all the listings that have ever been made on this marketplace.",
                "example": "\n        listings = contract.get_all_listings()\n        price_of_first = listings[0].price\n        "
            },
            {
                "name": "get_all_listings",
                "summary": "Get all the listings that have ever been made on this marketplace.",
                "example": "\n        listings = contract.get_all_listings()\n        price_of_first = listings[0].price\n        "
            },
            {
                "name": "set_bid_buffer_bps",
                "summary": "Set the bid buffer basis points for this marketplace.",
                "example": "\n        buffer_bps = 500\n        contract.set_bid_buffer_bps(buffer_bps)\n        "
            },
            {
                "name": "set_time_buffer_in_seconds",
                "summary": "Set the time buffer of the marketplace.",
                "example": "\n        buffer_in_seconds = 60\n        contract.set_time_buffer_in_seconds(buffer_in_seconds)\n        "
            }
        ],
        "properties": [],
        "reference": ""
    },
    "NFTDrop": {
        "name": "type",
        "summary": "Setup a collection of one-of-one NFTs that are minted as users claim them.",
        "example": "\n    from thirdweb import ThirdwebSDK\n    from eth_account import Account\n    from web3 import Web3\n\n    // You can switch out this provider and RPC URL for your own\n    provider = Web3(Web3.HTTPProvider(\"<RPC_URL>\"))\n    // This will create a random account to use for signing transactions\n    signer = Account.create()\n\n    sdk = ThirdwebSDK(provider, signer)\n    contract = sdk.get_nft_drop(\"{{contract_address}}\")\n    ",
        "methods": [
            {
                "name": "balance_of",
                "summary": "Get the token balance of a specific address",
                "example": "\n        balance = contract.balance_of(\"{{wallet_address}}\")\n        print(balance)\n        "
            },
            {
                "name": "claim_to",
                "summary": "Claim NFTs to a destination address.",
                "example": "\n        address = {{wallet_address}}\n        quantity = 1\n\n        tx = contract.claim_to(address, quantity)\n        receipt = tx.receipt\n        claimed_token_id = tx.id\n        claimed_nft = tx.data()\n        "
            },
            {
                "name": "create_batch",
                "summary": "Create a batch of NFTs.",
                "example": "\n        from thirdweb.types.nft import NFTMetadataInput\n\n        # You can customize this metadata however you like\n        metadatas = [\n            NFTMetadataInput.from_json({\n                \"name\": \"Cool NFT\",\n                \"description\": \"This is a cool NFT\",\n                \"image\": open(\"path/to/file.jpg\", \"rb\"),\n            }),\n            NFTMetadataInput.from_json({\n                \"name\": \"Cooler NFT\",\n                \"description\": \"This is a cooler NFT\",\n                \"image\": open(\"path/to/file.jpg\", \"rb\"),\n            }),\n        ]\n\n        txs = contract.create_batch(metadatas)\n        first_token_id = txs[0].id\n        first_nft = txs[0].data()\n        "
            },
            {
                "name": "get",
                "summary": "Get metadata for a token",
                "example": "\n        nft = contract.get(0)\n        print(nft)\n        "
            },
            {
                "name": "get_all",
                "summary": "Get the metadata of all tokens in the contract",
                "example": "\n        nfts = contract.get_all()\n        print(nfts)\n        "
            },
            {
                "name": "get_all_claimed",
                "summary": "Get all claimed NFTs.",
                "example": "\n        claimed_nfts = contract.get_all_claimed()\n        first_owner = claimed_nfts[0].owner\n        "
            },
            {
                "name": "get_all_unclaimed",
                "summary": "Get all unclaimed NFTs.",
                "example": "\n        unclaimed_nfts = contract.get_all_unclaimed()\n        first_nft_name = unclaimed_nfts[0].name\n        "
            },
            {
                "name": "get_owned",
                "summary": "Get the metadata of all tokens owned by a specific address",
                "example": "\n        nfts = contract.get_owned(\"{{wallet_address}}\")\n        print(nfts)\n        "
            },
            {
                "name": "total_claimed_supply",
                "summary": "Get the total number of NFTs claimed from this contract",
                "example": "\n        total_claimed = contract.total_claimed_supply()\n        "
            },
            {
                "name": "total_unclaimed_supply",
                "summary": "Get the total number of unclaimed NFTs in this contract",
                "example": "\n        total_unclaimed = contract.total_unclaimed_supply()\n        "
            },
            {
                "name": "transfer",
                "summary": "Transfer a specified token from the connected wallet to a specified address.",
                "example": "\n        to = \"{{wallet_address}}\"\n        token_id = 0\n\n        receipt = contract.transfer(to, token_id)\n        "
            }
        ],
        "properties": [],
        "reference": ""
    },
    "EditionDrop": {
        "name": "type",
        "summary": "Setup a collection of NFTs with a customizable number of each NFT that are minted as users claim them.",
        "example": "\n    from thirdweb import ThirdwebSDK\n    from eth_account import Account\n    from web3 import Web3\n\n    // You can switch out this provider and RPC URL for your own\n    provider = Web3(Web3.HTTPProvider(\"<RPC_URL>\"))\n    // This will create a random account to use for signing transactions\n    signer = Account.create()\n\n    sdk = ThirdwebSDK(provider, signer)\n    contract = sdk.get_edition_drop(\"{{contract_address}}\")\n    ",
        "methods": [
            {
                "name": "balance_of",
                "summary": "Get a specific wallets balance of a specific token",
                "example": "\n        address = \"{{wallet_address}}\"\n        token_id = 0\n\n        balance = contract.balance_of(address, token_id)\n        "
            },
            {
                "name": "claim_to",
                "summary": "Claim NFTs to a destination address.",
                "example": "\n        address = {{wallet_address}}\n        token_id = 0\n        quantity = 1\n\n        tx = contract.claim_to(address, token_id, quantity)\n        receipt = tx.receipt\n        claimed_token_id = tx.id\n        claimed_nft = tx.data()\n        "
            },
            {
                "name": "create_batch",
                "summary": "Create a batch of NFTs.",
                "example": "\n        from thirdweb.types.nft import NFTMetadataInput, EditionMetadataInput\n\n        # Note that you can customize this metadata however you like\n        metadatas_with_supply = [\n            EditionMetadataInput(\n                NFTMetadataInput.from_json({\n                    \"name\": \"Cool NFT\",\n                    \"description\": \"This is a cool NFT\",\n                    \"image\": open(\"path/to/file.jpg\", \"rb\"),\n                }),\n                100\n            ),\n            EditionMetadataInput(\n                NFTMetadataInput.from_json({\n                    \"name\": \"Cooler NFT\",\n                    \"description\": \"This is a cooler NFT\",\n                    \"image\": open(\"path/to/file.jpg\", \"rb\"),\n                }),\n                100\n            )\n        ]\n\n        txs = contract.create_batch(metadata_with_supply)\n        first_token_id = txs[0].id\n        first_nft = txs[0].data()\n        "
            },
            {
                "name": "get",
                "summary": "Get metadata for a token",
                "example": "\n        nft = contract.get(0)\n        print(nft)\n        "
            },
            {
                "name": "get_all",
                "summary": "Get the metadata for all tokens on the contract",
                "example": "\n        metadatas = contract.get_all()\n        print(metadatas)\n        "
            },
            {
                "name": "get_owned",
                "summary": "Get the metadata for all the tokens owned by an address",
                "example": "\n        address = \"{{wallet_address}}\"\n        owned = contract.get_owned(address)\n        print(owned)\n        "
            },
            {
                "name": "transfer",
                "summary": "Transfer a specified token from the connected wallet to a specified address.",
                "example": "\n        to = \"{{wallet_address}}\"\n        token_id = 0\n        amount = 1\n\n        receipt = contract.transfer(to, token_id, amount)\n        "
            }
        ],
        "properties": [],
        "reference": ""
    }
}